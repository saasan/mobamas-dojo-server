#!/usr/bin/env node
'use strict';

var request = require('request');
var xml2json = require('xml2json');
var async = require('async');
var config = require('config');
var mongoose = require('mongoose');
var schema = require('../schema');

// mongoDBサーバ接続
mongoose.connect(process.env.MONGOHQ_URL || 'mongodb://localhost/amafi');
var db = mongoose.connection;

// Storeスキーマモデル生成
var Stores = db.model('Stores', schema.StoreSchema);

/**
 * RSSの内容をパースしてASIN、タイトル、画像のURLをオブジェクトとして返す
 * @param {string} body RSSのXML
 * @return {object} ASIN、タイトル、画像のURLを含むオブジェクト
 */
function parse(body) {
  var rss, items, i, asin, title, imageUrl, result = [];

  rss = xml2json.toJson(body, { object: true, sanitize: false });
  items = rss.rss.channel.item;

  for (i = 0; i < items.length; i++) {
    asin = items[i].link;
    title = items[i].title;
    imageUrl = items[i].description;

    asin = asin.match(/\/dp\/([^\/]+)\//)[1];
    title = title.replace(/^#\d+: /, '');
    imageUrl = imageUrl.match(/<img src="(http:\/\/(g-)?ecx\.images\-amazon\.com\/images\/[^"]+)"/)[1];

    result.push({ 'asin': asin, 'title': title, 'imageUrl': imageUrl });
  }

  return result;
}

/**
 * RSSを取得する
 * @param {object} store RSSを取得するstoreの情報
 * @param {function} next コールバック関数
 */
function fetch(store, next) {
  console.log('fetch store started: ' + store.name);

  var url = config.baseURL + store.searchIndex + '/' + store.browseNode;
  request.get(url, function(err, res, body) {
    console.log('fetch store finished: ' + store.name);

    if (!err && res.statusCode === 200) {
      console.log('save store started: ' + store.name);

      var dbStore = new Stores();
      dbStore.name = store.name;
      dbStore.bestseller = parse(body);

      dbStore.save(function(err) {
        if (err) {
          console.log('error: ' + err);
          next(err);
        }
        else {
          console.log('save store finished: ' + store.name);
          next();
        }
      });
    }
    else {
      console.log('error: ' + res.statusCode + ' ' + err);
      next(err);
    }
  });
}

console.log('===== getrss started =====');
console.log('remove stores started');
// 全削除
Stores.remove({}, function(err) {
  if (err) {
    console.log('error: ' + err);
  }
  else {
    console.log('remove stores finished');

    // 各storeに対して順番にfetchを呼ぶ。完了したら第3引数の無名関数が呼ばれる。
    async.eachSeries(config.stores, fetch, function(err) {
      if (err) {
        console.log('error: ' + err);
      }

      mongoose.disconnect();
      console.log('===== getrss finished =====');
    });
  }
});

